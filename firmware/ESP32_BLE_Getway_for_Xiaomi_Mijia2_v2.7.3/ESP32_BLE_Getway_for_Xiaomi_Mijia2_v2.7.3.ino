/*

  ESP32 BLE Шлюз для Xiaomi Mijia 2 (ТОЛЬКО для кастомной прошивки от "PVVX MiThermometer").

  Шлюз производит сканирование BLE сети на наличие датчиков "Xiaomi Mijia 2", обрабатывает показания и публикует по MQTT.

  P.S. У меня 2 датчика, мне этого достаточно и данный шлюз рассчитывал использование двух датчиов.
  Если нужно больше или меньше, то редактируйте код под себя, всё же проект делал в первую очередь для личного использования. Комментариев в коде избыточно.



  ПОРЯДОК ДЕЙСТВИЙ:
  1) Перепрошиваем датчики "Xiaomi Mijia 2" на кастомную прошивку от "PVVX MiThermometer".
  Страница проекта на GitHUB: "PVVX MiThermometer": https://github.com/pvvx/ATC_MiThermometer
  Страница с WEB прошивальщиком: https://pvvx.github.io/ATC_MiThermometer/TelinkMiFlasher.html
  P.S. Рекомендую после перепрошивки установить PIN-КОД на доступ к датчикам по BLE, что бы защитить их от несанкционированного доступа третьими лицами.
  Так же имеет смысл сразу написать понятное имя на название датчика в BLE сети. Все настроки производятся на странице с прошивальщиком.

  2) Смотрим MAC адреса на странице прошивальщика или скачиваем любой BLE сканер на смартфон из Play Маркета и сканируем сеть.

  3) Прописываем MAC адреса датчиков на странице "a0_Settings".

  4) Так же на этой странице нужно изменить коэффициент для корректировки напряжения на батарейках в датчиках (на странице настроек описано как это сделать).

  5) Там же на странице настроек сразу меняем Логин/Пароль для ElegantOTA (всегда используйте сложные пароли), остальные пункты по желанию.
  
  6) Загружайте скетч в ESP32 с  параметрами указанными ниже в отдельном блоке.

  7) Находите WiFi сеть под названием "ESP Config" (без пароля), подключаетесь и вводите свои настройки.
  P.S. Библиотека "EspMQTTClient" для работы с MQTT не поддерживает работу с шифрованием, так что нужен порт без шифрования. Поддерживается зищита только в виде авторизации.

  8) Всё, Можно проверять. Так же после успешного соединения с MQTT LED индикатор будет мигать раз в 210мс, сигнализируя, что соединение установлено.
  


  Параметры платы в Arduino IDE (у меня ESP32 с 8MB Flash):
  1) Плата "ESP32 Dev Module" (версия платы 2.0.11)
  2) CPU Frequency: 240MHz(WiFi/BT)
  3) Erase All Flash Before Sketch Upload: Enable
  4) Flash Mode: QIO
  5) Flash Size: 8MB (64Mb)
  6) Partition Scheme: 8M with spiffs (3MB APP/1.5MB SPIFFS)
  7) Upload Speed: 921600
  8) Программатор: Esptool

  Остальное параметры не трогал, стоят по умолчанию.



  ЗАМЕТКИ:
  - Для настроки или просто посмотреть как это работает рекомендую использовать "MQTT-Explorer" для ПК, он очень удобный и кроссплатформенный "http://mqtt-explorer.com".
  - Все нужные настройки перед компиляцией можно настроить на вкладке "a0_Settings".
  - На WEB интерфейсе реализована только OTA для обновлений прошивки по воздуху, другого мне не нужно было.
  - MQTT в данном коде не подписывается на какие либо топики, тут реализована только публикация с датчиков на сервер (то есть управлять ESP32 по MQTT нельзя, так как мне это не нужно было).
  - Добавил уровень "SYS" для публикации параметров самой ESP32.
  - Настройки подключения к WiFI и MQTT хранятся в конфиге в FS.
  - Для сброса настроек (форматировнаие FS) нужно зажать кнопку RESET и держать, пока не заморгает раз в 40мс LED индикатор,
  после чего можно отпускать кнопку и ждём секунд 5-7 пока отформатируется FS, после чего появится точка доступа "ESP Config" (без пароля).
  - Второй способ сброса настроек - это зажать кнопку RESET и подать питание на плату ESP32, после чего сбросится ключ для конфига и запустится портал для установки новых настроек.




  Изменения:
  - Начальный релиз (Версия: 2.7.1, Дата создания: 05.09.2023г.)
  - Добавил мигание LED индикатором каждые 210мс при успешном соединении с MQTT. Добавил второй способ сбросить настроки, для этого нужно зажать кнопку и включить ESP32 (Версия: 2.7.3, Дата создания: 07.09.2023г.)


  Дата создания: 07.09.2023г.
  Версия: 2.7.3
  Автор: Otto.

*/